plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'com.diffplug.spotless' version '7.0.2'
    id("com.gradleup.shadow") version "9.0.0-beta12"
}

ext {
    springBootVersion = "3.4.4"
    pdfboxVersion = "3.0.4"
    imageioVersion = "3.12.0"
    lombokVersion = "1.18.38"
    bouncycastleVersion = "1.80"
    springSecuritySamlVersion = "6.4.4"
    openSamlVersion = "4.3.2"
    tempJrePath = null
}

group = 'stirling.software.SPDF'
version = '0.1.0'

java {
    sourceCompatibility = JavaVersion.VERSION_17
    withJavadocJar()
    withSourcesJar()
}

repositories {
    mavenCentral()
    maven { url = "https://build.shibboleth.net/maven/releases" }
}

dependencyManagement {
    imports {
        mavenBom("org.springframework.boot:spring-boot-dependencies:3.4.4")
    }
}

configurations.all {
    exclude group: 'commons-logging', module: 'commons-logging'
    exclude group: "org.springframework.boot", module: "spring-boot-starter-tomcat"
}

dependencies {

implementation files("${projectDir}/Stirling-PDF-0.45.1.jar")

    //tmp for security bumps
    implementation 'ch.qos.logback:logback-core:1.5.18'
    implementation 'ch.qos.logback:logback-classic:1.5.18'


    // Exclude vulnerable BouncyCastle version used in tableau
    configurations.all {
        exclude group: 'org.bouncycastle', module: 'bcpkix-jdk15on'
        exclude group: 'org.bouncycastle', module: 'bcutil-jdk15on'
        exclude group: 'org.bouncycastle', module: 'bcmail-jdk15on'
    }

    if (System.getenv("STIRLING_PDF_DESKTOP_UI") != "false") {
        implementation "me.friwi:jcefmaven:132.3.1"
        implementation "org.openjfx:javafx-controls:21"
        implementation "org.openjfx:javafx-swing:21"
    }

    //security updates
    implementation "org.springframework:spring-webmvc:6.2.5"

    implementation("io.github.pixee:java-security-toolkit:1.2.1")

    // Exclude Tomcat and include Jetty
    implementation("org.springframework.boot:spring-boot-starter-web:$springBootVersion")
    implementation "org.springframework.boot:spring-boot-starter-jetty:$springBootVersion"

    implementation "org.springframework.boot:spring-boot-starter-thymeleaf:$springBootVersion"
    implementation 'com.posthog.java:posthog:1.2.0'
    implementation 'com.googlecode.owasp-java-html-sanitizer:owasp-java-html-sanitizer:20240325.1'


	    implementation 'org.springframework.boot:spring-boot-starter-actuator'
	    implementation 'io.micrometer:micrometer-registry-prometheus'

        implementation "org.springframework.boot:spring-boot-starter-security:$springBootVersion"
        implementation "org.thymeleaf.extras:thymeleaf-extras-springsecurity5:3.1.3.RELEASE"
        implementation "org.springframework.boot:spring-boot-starter-data-jpa:$springBootVersion"
        implementation "org.springframework.boot:spring-boot-starter-oauth2-client:$springBootVersion"

        implementation "org.springframework.session:spring-session-core:3.4.2"
        implementation "org.springframework:spring-jdbc:6.2.5"

        implementation 'com.unboundid.product.scim2:scim2-sdk-client:2.3.5'
        // Don't upgrade h2database
        runtimeOnly "com.h2database:h2:2.3.232"
        runtimeOnly "org.postgresql:postgresql:42.7.5"
        constraints {
            implementation "org.opensaml:opensaml-core:$openSamlVersion"
            implementation "org.opensaml:opensaml-saml-api:$openSamlVersion"
            implementation "org.opensaml:opensaml-saml-impl:$openSamlVersion"
        }
        implementation "org.springframework.security:spring-security-saml2-service-provider:$springSecuritySamlVersion"
        // implementation 'org.springframework.security:spring-security-core:$springSecuritySamlVersion'
        implementation 'com.coveo:saml-client:5.0.0'

    
    implementation 'org.snakeyaml:snakeyaml-engine:2.9'

    testImplementation "org.springframework.boot:spring-boot-starter-test:$springBootVersion"

    // Batik
    implementation "org.apache.xmlgraphics:batik-all:1.18"

    // TwelveMonkeys
    runtimeOnly "com.twelvemonkeys.imageio:imageio-batik:$imageioVersion"
    runtimeOnly "com.twelvemonkeys.imageio:imageio-bmp:$imageioVersion"
    // runtimeOnly "com.twelvemonkeys.imageio:imageio-hdr:$imageioVersion"
    // runtimeOnly "com.twelvemonkeys.imageio:imageio-icns:$imageioVersion"
    // runtimeOnly "com.twelvemonkeys.imageio:imageio-iff:$imageioVersion"
    runtimeOnly "com.twelvemonkeys.imageio:imageio-jpeg:$imageioVersion"
    // runtimeOnly "com.twelvemonkeys.imageio:imageio-pcx:$imageioVersion@
    // runtimeOnly "com.twelvemonkeys.imageio:imageio-pict:$imageioVersion"
    // runtimeOnly "com.twelvemonkeys.imageio:imageio-pnm:$imageioVersion"
    // runtimeOnly "com.twelvemonkeys.imageio:imageio-psd:$imageioVersion"
    // runtimeOnly "com.twelvemonkeys.imageio:imageio-sgi:$imageioVersion"
    // runtimeOnly "com.twelvemonkeys.imageio:imageio-tga:$imageioVersion"
    // runtimeOnly "com.twelvemonkeys.imageio:imageio-thumbsdb:$imageioVersion"
    runtimeOnly "com.twelvemonkeys.imageio:imageio-tiff:$imageioVersion"
    runtimeOnly "com.twelvemonkeys.imageio:imageio-webp:$imageioVersion"
    // runtimeOnly "com.twelvemonkeys.imageio:imageio-xwd:$imageioVersion"

    // Image metadata extractor
    implementation "com.drewnoakes:metadata-extractor:2.19.0"

    implementation "commons-io:commons-io:2.18.0"
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0"
    //general PDF

    // https://mvnrepository.com/artifact/com.opencsv/opencsv
    implementation ("com.opencsv:opencsv:5.10")

    implementation ("org.apache.pdfbox:pdfbox:$pdfboxVersion")
    implementation "org.apache.pdfbox:preflight:$pdfboxVersion"


    implementation ("org.apache.pdfbox:xmpbox:$pdfboxVersion")

    // https://mvnrepository.com/artifact/technology.tabula/tabula
    implementation ('technology.tabula:tabula:1.0.5')  {
        exclude group: "org.slf4j", module: "slf4j-simple"
        exclude group: "org.bouncycastle", module: "bcprov-jdk15on"
        exclude group: "com.google.code.gson", module: "gson"
    }

    implementation 'org.apache.pdfbox:jbig2-imageio:3.0.4'

    implementation "org.bouncycastle:bcprov-jdk18on:$bouncycastleVersion"
    implementation "org.bouncycastle:bcpkix-jdk18on:$bouncycastleVersion"
    implementation "org.springframework.boot:spring-boot-starter-actuator:$springBootVersion"
    implementation "io.micrometer:micrometer-core:1.14.5"
    implementation group: "com.google.zxing", name: "core", version: "3.5.3"
    // https://mvnrepository.com/artifact/org.commonmark/commonmark
    implementation "org.commonmark:commonmark:0.24.0"
    implementation "org.commonmark:commonmark-ext-gfm-tables:0.24.0"
    // https://mvnrepository.com/artifact/com.bucket4j/bucket4j_jdk17
    implementation "com.bucket4j:bucket4j_jdk17-core:8.14.0"
    implementation "com.fathzer:javaluator:3.0.5"

    implementation 'com.vladsch.flexmark:flexmark-html2md-converter:0.64.8'

    compileOnly "org.projectlombok:lombok:$lombokVersion"
    annotationProcessor "org.projectlombok:lombok:$lombokVersion"

    testRuntimeOnly 'org.mockito:mockito-inline:5.2.0'
}

spotless {
    java {
        googleJavaFormat("1.25.2").aosp().reorderImports(false)
        importOrder("java", "javax", "org", "com", "net", "io", "jakarta", "lombok", "me", "stirling")
        toggleOffOn()
        trimTrailingWhitespace()
        leadingTabsToSpaces()
        endWithNewline()
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"
    dependsOn "spotlessApply"
}

compileJava {
    options.compilerArgs << "-parameters"
}

test {
    useJUnitPlatform()
}

// Publishing configuration
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            
            pom {
                name = 'Stirling PDF Security'
                description = 'Security module for Stirling PDF'
                url = 'https://github.com/Stirling-Tools/stirling-pdf-security'
                
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://opensource.org/licenses/MIT'
                    }
                }
                
                developers {
                    developer {
                        id = 'frooodle'
                        name = 'Frooodle'
                        email = 'support@stirlingpdf.com'
                    }
                }
                
                scm {
                    connection = 'scm:git:git://github.com/Stirling-Tools/stirling-pdf-security.git'
                    developerConnection = 'scm:git:ssh://github.com/Stirling-Tools/stirling-pdf-security.git'
                    url = 'https://github.com/Stirling-Tools/stirling-pdf-security'
                }
            }
        }
    }
    
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/Stirling-Tools/stirling-pdf-security")
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
}

tasks.shadowJar {
    zip64 = true
  }
  
// Optional: Sign artifacts if needed
signing {
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.mavenJava
}

tasks.withType(Sign) {
    onlyIf { project.hasProperty("signingKey") && project.hasProperty("signingPassword") }
}
